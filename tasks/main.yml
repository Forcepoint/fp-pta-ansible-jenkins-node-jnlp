---
# tasks file for jenkins-node-jnlp

- name: create user
  become: yes
  vars:
    # For whatever reason, passing a vaulted variable into the password_hash filter causes ansible to throw an error.
    # You must assign the vaulted variable to another variable first, then it will work properly with password_hash.
    unvaulted_jenkins_node_user_password: "{{ jenkins_node_user_password }}"
  ansible.builtin.user:
    name: "{{ jenkins_node_user }}"
    # I'm not sure, but setting this seems to bork the auto login of the user. I couldn't login
    # shell: /bin/bash
    generate_ssh_key: yes
    ssh_key_bits: 4096
    password: "{{ unvaulted_jenkins_node_user_password | password_hash('sha512') }}"

- name: enable git-lfs
  become: yes
  become_user: "{{ jenkins_node_user }}"
  ansible.builtin.shell: git lfs install

- name: enable auto login
  become: yes
  ansible.builtin.blockinfile:
    path: /etc/gdm/custom.conf
    insertafter: "\\[daemon\\]"
    block: |
      AutomaticLoginEnable=True
      AutomaticLogin={{ jenkins_node_user }}
  register: result_auto_login_config

- name: create the autostart directory
  become: yes
  ansible.builtin.file:
    state: directory
    path: /home/{{ jenkins_node_user }}/.config/autostart
    owner: "{{ jenkins_node_user }}"
    group: "{{ jenkins_node_user }}"
    mode: 0775

- name: copy file which runs login.sh upon login
  become: yes
  ansible.builtin.copy:
    src: login.desktop
    dest: /home/{{ jenkins_node_user }}/.config/autostart/login.desktop
    mode: 0744
    owner: "{{ jenkins_node_user }}"
    group: "{{ jenkins_node_user }}"
  register: result_auto_login_script

- name: create folder for workspaces
  become: yes
  ansible.builtin.file:
    path: "{{ jenkins_node_path }}"
    owner: "{{ jenkins_node_user }}"
    group: "{{ jenkins_node_user }}"
    mode: 0774
    state: directory

- name: download the agent jar
  become: yes
  ansible.builtin.get_url:
    url: "{{ jenkins_node_master_url }}/jnlpJars/agent.jar"
    dest: "{{ jenkins_node_path }}/agent.jar"
    owner: "{{ jenkins_node_user }}"
    group: "{{ jenkins_node_user }}"
    mode: 0744
  register: result_download_agent_jar

- name: install openjdk{{ jenkins_node_openjdk_major_version }} latest
  become: yes
  ansible.builtin.yum:
    # https://www.digitalocean.com/community/tutorials/how-to-install-java-on-centos-and-fedora
    # To install the JDK, you have to install java-###-openjdk-devel. Without the devel, you just get the JRE,
    # despite the VERY misleading name.
    name: "java-{{ jenkins_node_openjdk_major_version }}-openjdk-devel"
    state: latest
  when: jenkins_node_openjdk_full_version == "latest"

# https://access.redhat.com/solutions/98873
- name: install versionlock
  become: yes
  ansible.builtin.yum:
    name: yum-plugin-versionlock
    state: latest
  when: jenkins_node_openjdk_full_version != "latest"

# Gotta let the package install/upgrade/downgrade if needed as the target version may have changed.
# The version lock is needed soley so a system wide yum update won't change the version of java.
- name: remove the version lock
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/yum/pluginconf.d/versionlock.list
    state: absent
    line: "1:java-{{ jenkins_node_openjdk_major_version }}-openjdk-*"
  when: jenkins_node_openjdk_full_version != "latest"

- name: install locked java version
  become: yes
  ansible.builtin.yum:
    name:
      - "java-{{ jenkins_node_openjdk_major_version }}-openjdk-{{ jenkins_node_openjdk_full_version }}"
      - "java-{{ jenkins_node_openjdk_major_version }}-openjdk-headless-{{ jenkins_node_openjdk_full_version }}"
      - "java-{{ jenkins_node_openjdk_major_version }}-openjdk-devel-{{ jenkins_node_openjdk_full_version }}"
    state: present
    allow_downgrade: yes
  when: jenkins_node_openjdk_full_version != "latest"

- name: add the version lock back in
  become: yes
  ansible.builtin.lineinfile:
    path: /etc/yum/pluginconf.d/versionlock.list
    state: present
    line: "1:java-{{ jenkins_node_openjdk_major_version }}-openjdk-*"
  when: jenkins_node_openjdk_full_version != "latest"

# Other roles may install other versions of Java. This makes the default java executable point to the desired one here.
- name: switch to java {{ jenkins_node_openjdk_major_version }}
  become: yes
  community.general.alternatives:
    name: java
    link: /usr/bin/java
    path: /usr/lib/jvm/jre-{{ jenkins_node_openjdk_major_version }}-openjdk/bin/java

- name: install python-jenkins
  become: yes
  ansible.builtin.pip:
    name: python-jenkins
    state: latest

- name: copy node creation script (py27)
  become: yes
  ansible.builtin.copy:
    src: create_jenkins_node_jnlp_py27.py
    dest: "{{ jenkins_node_path }}/create_jenkins_node_jnlp.py"
    owner: "{{ jenkins_node_user }}"
    group: "{{ jenkins_node_user }}"
    mode: 0744
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version <= '7'

- name: copy node creation script (py3)
  become: yes
  ansible.builtin.copy:
    src: create_jenkins_node_jnlp_py3.py
    dest: "{{ jenkins_node_path }}/create_jenkins_node_jnlp.py"
    owner: "{{ jenkins_node_user }}"
    group: "{{ jenkins_node_user }}"
    mode: 0744
  when: ansible_distribution == "CentOS" and ansible_distribution_major_version > '7'

- name: install certifi
  become: yes
  ansible.builtin.pip:
    name: certifi
    state: latest

- name: copy modify certifi script
  become: yes
  ansible.builtin.copy:
    src: modify_certifi.py
    dest: "{{ jenkins_node_path }}/modify_certifi.py"
    owner: "{{ jenkins_node_user }}"
    group: "{{ jenkins_node_user }}"
    mode: 0755

- name: modify certifi if needed
  become: yes
  ansible.builtin.command: python {{ jenkins_node_path }}/modify_certifi.py "{{ jenkins_node_master_url }}" "{{ jenkins_node_master_ca_cert }}"

- name: add the node config to the jenkins master
  become: yes
  # To run this script, the user provided has to have Administrator rights in the Jenkins instance because it runs the Script Console.
  # See https://support.cloudbees.com/hc/en-us/articles/222520647-How-to-find-slave-secret-key-
  ansible.builtin.command: python {{ jenkins_node_path }}/create_jenkins_node_jnlp.py "{{ jenkins_node_master_url }}" "{{ jenkins_node_master_user }}" "{{ jenkins_node_master_password }}" "{{ jenkins_node_name }}" "{{ jenkins_node_description }}" "{{ jenkins_node_labels }}" "{{ jenkins_node_path }}/node_secret.txt" "--num-executors={{ jenkins_node_executors }}" "--path={{ jenkins_node_path }}" "-v"

- name: fetch the node secret from the remote
  become: yes
  ansible.builtin.fetch:
    src: "{{ jenkins_node_path }}/node_secret.txt"
    dest: /tmp/fetch-{{ inventory_hostname }}/
    flat: yes

- name: get the node secret
  ansible.builtin.set_fact:
    jenkins_node_secret: "{{ lookup('file', '/tmp/fetch-{{ inventory_hostname }}/node_secret.txt').strip() }}"
  no_log: yes

- name: copy login.sh
  become: yes
  ansible.builtin.template:
    src: login.sh
    dest: /home/{{ jenkins_node_user }}/login.sh
    mode: 0700
    owner: "{{ jenkins_node_user }}"
    group: "{{ jenkins_node_user }}"
  register: result_copy_login

- name: remove the node secret from localhost
  ansible.builtin.file:
    state: absent
    path: /tmp/fetch-{{ inventory_hostname }}/node_secret.txt
  delegate_to: localhost

# Restart if any of the above pertinent tasks changed.
- ansible.builtin.include_tasks: restart.yml
  when: result_copy_login.changed or result_download_agent_jar.changed or result_auto_login_config.changed or result_auto_login_script.changed

- name: copy node verify script
  become: yes
  ansible.builtin.copy:
    src: verify_jenkins_node_jnlp.py
    dest: "{{ jenkins_node_path }}/verify_jenkins_node_jnlp.py"
    owner: "{{ jenkins_node_user }}"
    group: "{{ jenkins_node_user }}"
    mode: 0744

- name: verify that the node is connected
  become: yes
  ansible.builtin.command: python {{ jenkins_node_path }}/verify_jenkins_node_jnlp.py "{{ jenkins_node_master_url }}" "{{ jenkins_node_master_user }}" "{{ jenkins_node_master_password }}" "{{ jenkins_node_name }}"
